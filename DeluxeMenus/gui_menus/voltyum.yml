open_command: voltyum
size: 45 
menu_title: '            &6&l⚡ &x&f&b&7&1&2&dV&x&f&c&8&7&3&7o&x&f&c&9&d&4&0l&x&f&d&b&3&4&at&x&f&e&c&8&5&4y&x&f&e&d&e&5&du&x&f&f&f&4&6&7m  &6&l⚡'
open_commands:
  - '[sound] ENTITY_ELDER_GUARDIAN_DEATH'
open_requirement: {}
items:
  'Permisos':
    material: head-ahmedos22
    data: 1
    slot: 20
    display_name: "&6&l⚡ &fSin Permisos &6&l⚡"
    lore:
      - "&8&m+-------------+"
      - "&7Este Panel no "
      - "&7Necesita de "
      - "&7Permisos"
      - "&8&m+-------------+"
    left_click_commands:
      - '[message] &6&l⚡ &x&f&b&7&1&2&dV&x&f&c&8&7&3&7o&x&f&c&9&d&4&0l&x&f&d&b&3&4&at&x&f&e&c&8&5&4y&x&f&e&d&e&5&du&x&f&f&f&4&6&7m  &6&l⚡ &7¡Has hecho clic en un panel sin necesidad de permisos!'
  'Panel con Condiciones 1':
    priority: 1
    material: head-Sarahhhh0
    slot: 22
    display_name: "&6&l⚡ &aCon Condiciones &6&l⚡"
    lore:
      - "&8&m+-------------+"
      - "&7Este Panel "
      - "&7y tener al menos 100 de dinero"
      - "&7Progreso: &a%vault_eco_balance% / 100"
      - "&8&m+-------------+"
    view_requirement:
      requirements:
        1:
          type: javascript
          expression: '%vault_eco_balance% >= 100'
    left_click_commands:
      - "[message] &6&l⚡ &x&f&b&7&1&2&dV&x&f&c&8&7&3&7o&x&f&c&9&d&4&0l&x&f&d&b&3&4&at&x&f&e&c&8&5&4y&x&f&e&d&e&5&du&x&f&f&f&4&6&7m  &6&l⚡ &7¡Has hecho clic en el panel después de cumplir con las condiciones!"
  'Panel con Condiciones 2':
    priority: 2
    material: head-V3ATH
    slot: 22
    display_name: "&6&l⚡ &cCon Condiciones &6&l⚡"
    lore:
      - "&8&m+-------------+"
      - "&7Este Panel "
      - "&7y tener al menos 100 de dinero"
      - "&7Progreso: &c%vault_eco_balance% / 100"
      - "&8&m+-------------+"
    left_click_commands:
      - "[message] &6&l⚡ &x&f&b&7&1&2&dV&x&f&c&8&7&3&7o&x&f&c&9&d&4&0l&x&f&d&b&3&4&at&x&f&e&c&8&5&4y&x&f&e&d&e&5&du&x&f&f&f&4&6&7m  &6&l⚡ &7Necesitas %vault_eco_balance% / 100 monedas"
  'Panel con Condiciones 2':
  'Panel Visible con Permisos':
    priority: 1
    material: head-MrHugo__
    slot: 24
    display_name: "&6&l⚡ &aVisible con Permisos &6&l⚡"
    lore:
      - "&8&m+-------------+"
      - "&7Este Panel solo"
      - "&7es visible si tienes"
      - "&7el permiso voltyum.perms"
      - "&8&m+-------------+"
    view_requirement:
      requirements:
        1:
          type: has permission
          permission: voltyum.perms
      deny_commands:
         - "[message] &6&l⚡ &x&f&b&7&1&2&dV&x&f&c&8&7&3&7o&x&f&c&9&d&4&0l&x&f&d&b&3&4&at&x&f&e&c&8&5&4y&x&f&e&d&e&5&du&x&f&f&f&4&6&7m  &6&l⚡ &7No tienes permisos para interactuar con este panel"
    click_commands:
      - "[message] &6&l⚡ &x&f&b&7&1&2&dV&x&f&c&8&7&3&7o&x&f&c&9&d&4&0l&x&f&d&b&3&4&at&x&f&e&c&8&5&4y&x&f&e&d&e&5&du&x&f&f&f&4&6&7m  &6&l⚡ &7Este panel solo se puede ver con permisos."   
  'Panel Visible':
    priority: 2
    material: head-TreeDC
    slot: 24
    display_name: "&6&l⚡ &cVisible &6&l⚡"
    lore:
      - "&8&m+-------------+"
      - "&7Este Panel solo"
      - "&7es visible si tienes"
      - "&7el permiso voltyum.perms"
      - "&8&m+-------------+"
    click_commands:
      - "[message] &6&l⚡ &x&f&b&7&1&2&dV&x&f&c&8&7&3&7o&x&f&c&9&d&4&0l&x&f&d&b&3&4&at&x&f&e&c&8&5&4y&x&f&e&d&e&5&du&x&f&f&f&4&6&7m  &6&l⚡ &7No tienes permisos para el panel invisible"  
  'filler_item':
    material: GRAY_STAINED_GLASS_PANE
    slots:
      - 0
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
      - 7
      - 8
      - 36
      - 37
      - 38
      - 39
      - 40
      - 41
      - 42
      - 43
      - 44
    display_name: '&©Spinnin'



      


# ==============================================================
#
# Random tips, tricks, and useful info below
#
# ==============================================================
#
# PER ITEM PERMISSION AND PRIORITY INFO:
#
# Per item permissions and priorities are optional.
# High priority = 1, Lowest priority = 2147483647.
# This allows you to show different items for a specific menu slot depending on the highest priority
# item permission a player has. This makes your menus very dynamic :)
#
# You CAN NOT specify a permission without a priority!
# You CAN specify a priority without a permission.
# You should always create a low priority item without a permission which will act as the no permission
# item if a player does not have permission for any of the items that require permission, otherwise
# no item will be set in the slot if a player does not have permission for any of the permission items.
#
# ==============================================================
#
# You specify the command which opens the menu. Make sure this command
# does not conflict with any existing commands on your server!
# A GUI menu without an open command specified will not be loaded!
#
# Menus configuration layout:
# menu_title: '<title of menu goes here>'
# command: <command to open this menu goes here>
# inventory_type: '<add this option if you want to create a menu of a different InventoryType aside from chest>'
# open_requirement:
#   requirements:
#     <unique name for this requirement>:
#    type: <type for this requirement>
#    <unique options per requirement type would go here>
#    deny_commands:
#    - '[message] you do not meet requirements to open this menu'
#   size: <size of this menu, increments of 9, max size is 54>
#   update_interval: <time in seconds this gui should update for a player if an item is set to update placeholders>
#   items:
#     <item identifier>:
#       material: <name or id>
#       material: head-<name of player>
#       material: basehead-<value> from https://minecraft-heads.com/custom-heads
#       material: hdb-<HeadDatabase id> (requires plugin HeadDatabase)
#       data: <integer, used for data values for wool etc>
#       amount: <amount of this item to show>
#       slot: <slot number to put this item, slots start at 0 and end at 53 for a size 54 inventory>
#       priority: <this is used if you have multiple items set for the same slot>
#       view_requirement: <see view requirement info below. The lowest priority item a player meets all view requirements for will be shown>
#       update: <true/false if this item should update placeholders on the interval set for the gui menu this item is in>
#       hide_attributes: <true/false if this item should display item attributes>
#       hide_enchantments: <true/false if this item should display item enchantment / level> (useful for 'enchantment glow' items)
#       hide_effects: <true/false if this item should display item effect attributes>
#       hide_unbreakable: <true/false if this item should display item unbreakable attributes>
#       banner_meta: (this is used if you want to display a custom banner with specific patterns)
#       - <dyecolor>;<PatternType> (more information on where to find DyeColor and PatternType names below)
#       - 'RED;BASE'
#       - 'WHITE;CREEPER'
#       display_name: <display name to show for this item>
#       lore:
#       - 'This is the lore of the item'
#       - 'placeholders can be used in the display_name or lore.'
#       enchantments: valid enchantment names can be found here: https://hub.spigotmc.org/javadocs/spigot/org/bukkit/enchantments/Enchantment.html
#       - '<ENCHANTMENT>;<LEVEL>'
#       - 'SILK_TOUCH;1'
#       left_click_commands:
#       right_click_commands:
#       shift_left_click_commands:
#       shift_right_click_commands:
#       middle_click_commands:
#       click_commands:
#       left_click_requirement: <Learn how to use this option in the requirements_menu.yml>
#       right_click_requirement: <Learn how to use this option in the requirements_menu.yml>
#       shift_left_click_requirement: <Learn how to use this option in the requirements_menu.yml>
#       shift_right_click_requirement: <Learn how to use this option in the requirements_menu.yml>
#       middle_click_requirement: <Learn how to use this option in the requirements_menu.yml>
#       click_requirement: <Learn how to use this option in the requirements_menu.yml>
#
#
# You can specify if a GUI menu should be loaded from another file:
#
# gui_menus:
#   <menu-name>:
#     file: 'menu-file.yml'
#
# This allows you to keep your config clean and not have tons of GUI menus cluttering it.
# The file format the GUI menu is loaded from must end in .yml
# GUI menus loaded from other configuration files must follow a specific format as well...
# To get started loading GUI menus from different files, simply create a GUI menu in this config and specify the file it will load from.
# After that is done, use /dm reload and DeluxeMenus will create a folder and file specific to the GUI menu you specified.
# If the file specified is created by DeluxeMenus (because it did not exist), a default GUI menu layout will be saved to that file.
# From here you can edit it to your liking and use /dm reload to update your GUI menu!
#
# This loading from external config files is only available for gui menus and will not work for click menus yet....
#
# banner_meta must be listed with a specific format:
# banner_meta:
# - <DyeColor>;<PatternType>
#
# Valid DyeColor names can be found here: https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/DyeColor.html
# Valid PatternTypes can be found here: https://hub.spigotmc.org/javadocs/bukkit/org/bukkit/block/banner/PatternType.html
# ==============================================================
#
# Requirement information
#
# Requirements can be set as the following:
#
# open_requirement: This requirement is checked when a menu is opened
# view_requirement: This requirement determines if an item should be set in a menu slot
# left_click_requirement: This requirement is checked when an item is left clicked
# right_click_requirement: This requirement is checked when an item is right clicked
#
# Requirement types:
#   javascript - Evaluates a javascript expression that must return true or false
#     configuration options:
#       expression
#
#   has item - Checks if a player has a specific item
#     configuration options:
#       material
#       amount
#       data
#       name
#       lore
#
#   has money - Checks if a player has enough money (Vault required)
#     configuration options:
#       amount
#
#   has permission - Checks if a player has a specific permission
#     configuration options:
#       permission
#
#   string contains - Checks if a string contains another string
#     configuration options:
#       input
#       output
#
#   string equals - Checks if a string equals another string
#     configuration options:
#       input
#       output
#
#   string equals ignorecase - Checks if a string equals another string ignoring case
#     configuration options:
#       input
#       output
#
#   > - Checks if a number is greater than another number
#     configuration options:
#       input
#       output
#
#   >= - Checks if a number is greater than or equal to another number
#     configuration options:
#       input
#       output
#
#   == - Checks if a number is equal to another number
#     configuration options:
#       input
#       output
#
#   <= - Checks if a number is less than or equal to another number
#     configuration options:
#       input
#       output
#
#   < - Checks if a number is less than another number
#     configuration options:
#       input
#       output
#
#   regex matches - Checks if a placeholder parsed string matches a regex pattern
#     configuration options:
#       input
#       regex
#
#
#
# So why would we want to use requirements?
# By default, DeluxeMenus does not require a player meet any conditions to open your menu.
# If you want to require a menu need a certain permission node for it to be accessed, or a certain amount of money
# for a menu to be opened, You do that with an 'open_requirement'.
# Below is an example of how you would deny opening a menu if the viewer does not have permission:
#
# menu_title: 'Menu that requires permission to open'
# open_command: testmenu
# size: 9
# open_requirement:
#   requirements:
#     this_requirement_name:
#       type: has permission
#       permission: 'testmenu.open'
#       deny_commands:
#       - '[message] you do not have permission to open testmenu'
#
# ==============================================================
#
# Every item in the items list must have a unique <item identifier>
#
# If you choose to update placeholders for a specific item, you must specify update_interval: <time>
# in the menu options for the specific menu.
#
# Every click_command must start with a specific identifier to know what to do for the execution.
# Valid click_command identifiers:
#
# [console] - Execute a command from the console
# Usage: - '[console] <command with no slash>'
#
# [player] - Execute a command for the menu viewer
# Usage: - '[player] <command with no slash>'
#
# [commandevent] - Fire a PlayerCommandPreprocessEvent for commands that do not use the bukkit command system
# Usage: - '[commandevent] <command with no slash>'
#
# [message] - Send a message to the menu viewer
# Usage: - [message] <message to send to the player
#
# [openguimenu] - Open a GUI menu (can only be used in GUI menu click_commands)
# Usage: - '[openguimenu] <guiMenuName>'
#
# [connect] - Connect to the specified bungee server
# Usage: - '[connect] <serverName>'
#
# [close] - Close the viewers open menu
# Usage: - '[close]
#
# [refresh] - Refresh items in the current menu view
# Usage: - '[refresh]
#
# [broadcastsound] - Broadcast a sound to the server
# Usage: - '[broadcastsound]
#
# [sound] - Play a sound for a the specific player
# Usage: - '[sound]
#
# [json] - Send a json message to the menu viewer
# Usage: - '[json] {"text":"message"}'
#
#
#
# You can delay any of the click command being performed by ending the command with
# <delay=(time in TICKS)>
# example:
#     - '[close]'
#     - '[message] it has been 5 seconds since the menu closed!<delay=100>'
#     - '[message] it has been 10 seconds since the menu closed!<delay=200>'
#
sweet: true
